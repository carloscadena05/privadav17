/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
import * as i0 from '@angular/forms';
import * as i1 from './forms.ngsummary';
import * as i2 from '@angular/core';
export function FormsModuleNgSummary() {
    return [{ summaryKind: 2, type: { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] },
            entryComponents: [], providers: [{ provider: { token: { identifier: { reference: i0.ɵi,
                                diDeps: [], lifecycleHooks: [] } }, useClass: { reference: i0.ɵi,
                            diDeps: [], lifecycleHooks: [] }, useValue: undefined,
                        useFactory: null, useExisting: undefined, deps: [],
                        multi: false }, module: { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] } }],
            modules: [{ reference: i0.ɵbc, diDeps: [], lifecycleHooks: [] },
                { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] }],
            exportedDirectives: [{ reference: i0.ɵbh }, { reference: i0.NgSelectOption }, { reference: i0.ɵq },
                { reference: i0.DefaultValueAccessor }, { reference: i0.ɵbe }, { reference: i0.ɵbg },
                { reference: i0.CheckboxControlValueAccessor }, { reference: i0.SelectControlValueAccessor },
                { reference: i0.SelectMultipleControlValueAccessor }, { reference: i0.RadioControlValueAccessor },
                { reference: i0.NgControlStatus }, { reference: i0.NgControlStatusGroup }, { reference: i0.RequiredValidator },
                { reference: i0.MinValidator }, { reference: i0.MinLengthValidator }, { reference: i0.MaxValidator },
                { reference: i0.MaxLengthValidator }, { reference: i0.PatternValidator }, { reference: i0.CheckboxRequiredValidator },
                { reference: i0.EmailValidator }, { reference: i0.NgModel }, { reference: i0.NgModelGroup },
                { reference: i0.NgForm }], exportedPipes: [] }, i1.NgModelNgSummary,
        i1.NgModelGroupNgSummary, i1.NgFormNgSummary, i1.ɵbcNgSummary, { summaryKind: 3, type: { reference: i0.ɵi,
                diDeps: [], lifecycleHooks: [] } }];
}
export function ɵbcNgSummary() {
    return [{ summaryKind: 2, type: { reference: i0.ɵbc, diDeps: [], lifecycleHooks: [] },
            entryComponents: [], providers: [], modules: [{ reference: i0.ɵbc,
                    diDeps: [], lifecycleHooks: [] }], exportedDirectives: [{ reference: i0.ɵbh },
                { reference: i0.NgSelectOption }, { reference: i0.ɵq }, { reference: i0.DefaultValueAccessor },
                { reference: i0.ɵbe }, { reference: i0.ɵbg }, { reference: i0.CheckboxControlValueAccessor },
                { reference: i0.SelectControlValueAccessor }, { reference: i0.SelectMultipleControlValueAccessor },
                { reference: i0.RadioControlValueAccessor }, { reference: i0.NgControlStatus },
                { reference: i0.NgControlStatusGroup }, { reference: i0.RequiredValidator }, { reference: i0.MinValidator },
                { reference: i0.MinLengthValidator }, { reference: i0.MaxValidator }, { reference: i0.MaxLengthValidator },
                { reference: i0.PatternValidator }, { reference: i0.CheckboxRequiredValidator },
                { reference: i0.EmailValidator }], exportedPipes: [] }, i1.ɵbhNgSummary,
        i1.NgSelectOptionNgSummary, i1.ɵqNgSummary, i1.DefaultValueAccessorNgSummary, i1.ɵbeNgSummary,
        i1.ɵbgNgSummary, i1.CheckboxControlValueAccessorNgSummary, i1.SelectControlValueAccessorNgSummary,
        i1.SelectMultipleControlValueAccessorNgSummary, i1.RadioControlValueAccessorNgSummary,
        i1.NgControlStatusNgSummary, i1.NgControlStatusGroupNgSummary, i1.RequiredValidatorNgSummary,
        i1.MinValidatorNgSummary, i1.MinLengthValidatorNgSummary, i1.MaxValidatorNgSummary,
        i1.MaxLengthValidatorNgSummary, i1.PatternValidatorNgSummary, i1.CheckboxRequiredValidatorNgSummary,
        i1.EmailValidatorNgSummary];
}
export function ReactiveFormsModuleNgSummary() {
    return [{ summaryKind: 2, type: { reference: i0.ReactiveFormsModule, diDeps: [],
                lifecycleHooks: [] }, entryComponents: [], providers: [{ provider: { token: { identifier: { reference: i0.FormBuilder,
                                diDeps: [], lifecycleHooks: [] } }, useClass: { reference: i0.FormBuilder,
                            diDeps: [], lifecycleHooks: [] }, useValue: undefined,
                        useFactory: null, useExisting: undefined, deps: [], multi: false },
                    module: { reference: i0.ReactiveFormsModule, diDeps: [], lifecycleHooks: [] } },
                { provider: { token: { identifier: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } },
                        useClass: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] },
                        useValue: undefined, useFactory: null, useExisting: undefined,
                        deps: [], multi: false }, module: { reference: i0.ReactiveFormsModule,
                        diDeps: [], lifecycleHooks: [] } }], modules: [{ reference: i0.ɵbc,
                    diDeps: [], lifecycleHooks: [] }, { reference: i0.ReactiveFormsModule,
                    diDeps: [], lifecycleHooks: [] }], exportedDirectives: [{ reference: i0.ɵbh },
                { reference: i0.NgSelectOption }, { reference: i0.ɵq }, { reference: i0.DefaultValueAccessor },
                { reference: i0.ɵbe }, { reference: i0.ɵbg }, { reference: i0.CheckboxControlValueAccessor },
                { reference: i0.SelectControlValueAccessor }, { reference: i0.SelectMultipleControlValueAccessor },
                { reference: i0.RadioControlValueAccessor }, { reference: i0.NgControlStatus }, { reference: i0.NgControlStatusGroup },
                { reference: i0.RequiredValidator }, { reference: i0.MinValidator }, { reference: i0.MinLengthValidator },
                { reference: i0.MaxValidator }, { reference: i0.MaxLengthValidator }, { reference: i0.PatternValidator },
                { reference: i0.CheckboxRequiredValidator }, { reference: i0.EmailValidator }, { reference: i0.FormControlDirective },
                { reference: i0.FormGroupDirective }, { reference: i0.FormControlName }, { reference: i0.FormGroupName },
                { reference: i0.FormArrayName }], exportedPipes: [] }, i1.FormControlDirectiveNgSummary,
        i1.FormGroupDirectiveNgSummary, i1.FormControlNameNgSummary, i1.FormGroupNameNgSummary,
        i1.FormArrayNameNgSummary, i1.ɵbcNgSummary, { summaryKind: 3, type: { reference: i0.FormBuilder,
                diDeps: [], lifecycleHooks: [] } }, { summaryKind: 3, type: { reference: i0.ɵi,
                diDeps: [], lifecycleHooks: [] } }];
}
export function NgModelNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgModel, diDeps: [{ isAttribute: false, isHost: true,
                        isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }], lifecycleHooks: [1,
                    3] }, isComponent: false, selector: '[ngModel]:not([formControlName]):not([formControl])',
            exportAs: 'ngModel', inputs: { name: 'name', isDisabled: 'disabled', model: 'ngModel',
                options: 'ngModelOptions' }, outputs: { update: 'ngModelChange' }, hostListeners: {},
            hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.NgModel } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function NgModelGroupNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgModelGroup, diDeps: [{ isAttribute: false,
                        isHost: true, isSelf: false, isSkipSelf: true, isOptional: false, token: { identifier: { reference: i0.ControlContainer } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }],
                lifecycleHooks: [0, 1] }, isComponent: false, selector: '[ngModelGroup]', exportAs: 'ngModelGroup',
            inputs: { name: 'ngModelGroup' }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {},
            providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null,
                    useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.NgModelGroup } },
                    deps: undefined, multi: false }], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function NgFormNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgForm, diDeps: [{ isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
            exportAs: 'ngForm', inputs: {}, outputs: { ngSubmit: 'ngSubmit' }, hostListeners: { submit: 'onSubmit($event)',
                reset: 'onReset()' }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.NgForm } }, deps: undefined, multi: false }],
            viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function ɵbhNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.ɵbh, diDeps: [], lifecycleHooks: [] },
            isComponent: false, selector: 'form:not([ngNoForm]):not([ngNativeValidate])', exportAs: null,
            inputs: {}, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: { novalidate: '' },
            providers: [], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function NgSelectOptionNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgSelectOption, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.ElementRef } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.Renderer } } }, { isAttribute: false, isHost: true,
                        isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.SelectControlValueAccessor } } }],
                lifecycleHooks: [1] }, isComponent: false, selector: 'option', exportAs: null,
            inputs: { ngValue: 'ngValue', value: 'value' }, outputs: {}, hostListeners: {}, hostProperties: {},
            hostAttributes: {}, providers: [], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function ɵqNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.ɵq, diDeps: [{ isAttribute: false, isHost: false,
                        isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.ElementRef } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.Renderer } } }, { isAttribute: false, isHost: true,
                        isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.SelectMultipleControlValueAccessor } } }],
                lifecycleHooks: [1] }, isComponent: false, selector: 'option', exportAs: null,
            inputs: { ngValue: 'ngValue', value: 'value' }, outputs: {}, hostListeners: {}, hostProperties: {},
            hostAttributes: {}, providers: [], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function DefaultValueAccessorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.DefaultValueAccessor, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }, { isAttribute: false, isHost: false,
                        isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.COMPOSITION_BUFFER_MODE } } }],
                lifecycleHooks: [] }, isComponent: false, selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: { input: '_handleInput($event.target.value)',
                blur: 'onTouched()', compositionstart: '_compositionStart()', compositionend: '_compositionEnd($event.target.value)' },
            hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.DefaultValueAccessor } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function ɵbeNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.ɵbe, diDeps: [{ isAttribute: false, isHost: false,
                        isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: 'onChange($event.target.value)',
                input: 'onChange($event.target.value)', blur: 'onTouched()' }, hostProperties: {},
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.ɵbe } }, deps: undefined, multi: true }],
            viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function ɵbgNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.ɵbg, diDeps: [{ isAttribute: false, isHost: false,
                        isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: 'onChange($event.target.value)',
                input: 'onChange($event.target.value)', blur: 'onTouched()' }, hostProperties: {},
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.ɵbg } }, deps: undefined, multi: true }],
            viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function CheckboxControlValueAccessorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.CheckboxControlValueAccessor, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: 'onChange($event.target.checked)',
                blur: 'onTouched()' }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.CheckboxControlValueAccessor } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function SelectControlValueAccessorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.SelectControlValueAccessor, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            exportAs: null, inputs: { compareWith: 'compareWith' }, outputs: {}, hostListeners: { change: 'onChange($event.target.value)',
                blur: 'onTouched()' }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.SelectControlValueAccessor } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function SelectMultipleControlValueAccessorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.SelectMultipleControlValueAccessor, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }], lifecycleHooks: [] },
            isComponent: false, selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
            exportAs: null, inputs: { compareWith: 'compareWith' }, outputs: {}, hostListeners: { change: 'onChange($event.target)',
                blur: 'onTouched()' }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.SelectMultipleControlValueAccessor } },
                    deps: undefined, multi: true }], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function RadioControlValueAccessorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.RadioControlValueAccessor, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i2.Renderer } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.ElementRef } } }, { isAttribute: false, isHost: false,
                        isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.ɵi } } },
                    { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false,
                        token: { identifier: { reference: i2.Injector } } }], lifecycleHooks: [0, 1] }, isComponent: false,
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            exportAs: null, inputs: { name: 'name', formControlName: 'formControlName',
                value: 'value' }, outputs: {}, hostListeners: { change: 'onChange()', blur: 'onTouched()' },
            hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.RadioControlValueAccessor } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function NgControlStatusNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgControlStatus, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: true, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.NgControl } } }],
                lifecycleHooks: [] }, isComponent: false, selector: '[formControlName],[ngModel],[formControl]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: {}, hostProperties: { 'class.ng-untouched': 'ngClassUntouched',
                'class.ng-touched': 'ngClassTouched', 'class.ng-pristine': 'ngClassPristine',
                'class.ng-dirty': 'ngClassDirty', 'class.ng-valid': 'ngClassValid', 'class.ng-invalid': 'ngClassInvalid',
                'class.ng-pending': 'ngClassPending' }, hostAttributes: {}, providers: [],
            viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function NgControlStatusGroupNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.NgControlStatusGroup, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: true, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.ControlContainer } } }],
                lifecycleHooks: [] }, isComponent: false, selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            exportAs: null, inputs: {}, outputs: {}, hostListeners: {}, hostProperties: { 'class.ng-untouched': 'ngClassUntouched',
                'class.ng-touched': 'ngClassTouched', 'class.ng-pristine': 'ngClassPristine',
                'class.ng-dirty': 'ngClassDirty', 'class.ng-valid': 'ngClassValid', 'class.ng-invalid': 'ngClassInvalid',
                'class.ng-pending': 'ngClassPending' }, hostAttributes: {}, providers: [],
            viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function RequiredValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.RequiredValidator, diDeps: [],
                lifecycleHooks: [] }, isComponent: false, selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
            exportAs: null, inputs: { required: 'required' }, outputs: {}, hostListeners: {},
            hostProperties: { 'attr.required': 'required ? "" : null' }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.RequiredValidator } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function MinValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.MinValidator, diDeps: [], lifecycleHooks: [3] },
            isComponent: false, selector: '[min][formControlName],[min][formControl],[min][ngModel]',
            exportAs: null, inputs: { min: 'min' }, outputs: {}, hostListeners: {}, hostProperties: { 'attr.min': 'min ? min : null' },
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.MinValidator } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function MinLengthValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.MinLengthValidator, diDeps: [],
                lifecycleHooks: [3] }, isComponent: false, selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            exportAs: null, inputs: { minlength: 'minlength' }, outputs: {}, hostListeners: {},
            hostProperties: { 'attr.minlength': 'minlength ? minlength : null' }, hostAttributes: {},
            providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null,
                    useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.MinLengthValidator } },
                    deps: undefined, multi: true }], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function MaxValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.MaxValidator, diDeps: [], lifecycleHooks: [3] },
            isComponent: false, selector: '[max][formControlName],[max][formControl],[max][ngModel]',
            exportAs: null, inputs: { max: 'max' }, outputs: {}, hostListeners: {}, hostProperties: { 'attr.max': 'max ? max : null' },
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.MaxValidator } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function MaxLengthValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.MaxLengthValidator, diDeps: [],
                lifecycleHooks: [3] }, isComponent: false, selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            exportAs: null, inputs: { maxlength: 'maxlength' }, outputs: {}, hostListeners: {},
            hostProperties: { 'attr.maxlength': 'maxlength ? maxlength : null' }, hostAttributes: {},
            providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null,
                    useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.MaxLengthValidator } },
                    deps: undefined, multi: true }], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function PatternValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.PatternValidator, diDeps: [],
                lifecycleHooks: [3] }, isComponent: false, selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            exportAs: null, inputs: { pattern: 'pattern' }, outputs: {}, hostListeners: {},
            hostProperties: { 'attr.pattern': 'pattern ? pattern : null' }, hostAttributes: {},
            providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null,
                    useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.PatternValidator } },
                    deps: undefined, multi: true }], viewProviders: [], queries: [],
            viewQueries: [], entryComponents: [], changeDetection: null,
            template: null, componentViewType: null, rendererType: null,
            componentFactory: null }];
}
export function CheckboxRequiredValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.CheckboxRequiredValidator, diDeps: [],
                lifecycleHooks: [] }, isComponent: false, selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
            exportAs: null, inputs: { required: 'required' }, outputs: {}, hostListeners: {},
            hostProperties: { 'attr.required': 'required ? "" : null' }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.CheckboxRequiredValidator } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function EmailValidatorNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.EmailValidator, diDeps: [], lifecycleHooks: [] },
            isComponent: false, selector: '[email][formControlName],[email][formControl],[email][ngModel]',
            exportAs: null, inputs: { email: 'email' }, outputs: {}, hostListeners: {}, hostProperties: {},
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.EmailValidator } }, deps: undefined,
                    multi: true }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function FormControlDirectiveNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.FormControlDirective, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }, { isAttribute: false,
                        isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }],
                lifecycleHooks: [3] }, isComponent: false, selector: '[formControl]', exportAs: 'ngForm',
            inputs: { form: 'formControl', model: 'ngModel', isDisabled: 'disabled' }, outputs: { update: 'ngModelChange' },
            hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.FormControlDirective } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function FormGroupDirectiveNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.FormGroupDirective, diDeps: [{ isAttribute: false,
                        isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [3] },
            isComponent: false, selector: '[formGroup]', exportAs: 'ngForm', inputs: { form: 'formGroup' },
            outputs: { ngSubmit: 'ngSubmit' }, hostListeners: { submit: 'onSubmit($event)', reset: 'onReset()' },
            hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.FormGroupDirective } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function FormControlNameNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.FormControlName, diDeps: [{ isAttribute: false,
                        isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }], lifecycleHooks: [1,
                    3] }, isComponent: false, selector: '[formControlName]', exportAs: null, inputs: { name: 'formControlName',
                model: 'ngModel', isDisabled: 'disabled' }, outputs: { update: 'ngModelChange' }, hostListeners: {},
            hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.FormControlName } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function FormGroupNameNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.FormGroupName, diDeps: [{ isAttribute: false,
                        isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }],
                lifecycleHooks: [0, 1] }, isComponent: false, selector: '[formGroupName]', exportAs: null,
            inputs: { name: 'formGroupName' }, outputs: {}, hostListeners: {}, hostProperties: {},
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.FormGroupName } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function FormArrayNameNgSummary() {
    return [{ summaryKind: 1, type: { reference: i0.FormArrayName, diDeps: [{ isAttribute: false,
                        isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } },
                    { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true,
                        token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false,
                        isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }],
                lifecycleHooks: [0, 1] }, isComponent: false, selector: '[formArrayName]', exportAs: null,
            inputs: { name: 'formArrayName' }, outputs: {}, hostListeners: {}, hostProperties: {},
            hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } },
                    useClass: null, useValue: undefined, useFactory: null,
                    useExisting: { identifier: { reference: i0.FormArrayName } }, deps: undefined,
                    multi: false }], viewProviders: [], queries: [], viewQueries: [],
            entryComponents: [], changeDetection: null, template: null,
            componentViewType: null, rendererType: null, componentFactory: null }];
}
export function ɵiNgSummary() {
    return [{ summaryKind: 3, type: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }];
}
export function FormBuilderNgSummary() {
    return [{ summaryKind: 3, type: { reference: i0.FormBuilder, diDeps: [], lifecycleHooks: [] } }];
}
//# sourceMappingURL=forms.ngsummary.js.map