@use "@angular/material" as mat;
@use "sass:color";
@use 'sass:math';

@include mat.core();

@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

$primary_color: 130 2 99;
$secondary_color: 251 139 36;
$tertiary_color: 217 3 104;

$success_color: 80 247 144;
$advertence_color: 247 194 80;
$info_color: 80 144 247;
$warn_color: 239 68 68;

@layer components {
   :root {
      --primary: #{$primary_color};
      --secondary: #{$secondary_color};
      --tertiary: #{$tertiary_color};
      --success: #{$success_color};
      --advertence: #{$advertence_color};
      --info: #{$info_color};
      --warn: #{$warn_color};
   }
}

$primary: rgba($primary_color);
$secondary: rgba($secondary_color);
$tertiary: rgba($tertiary_color);
$success: rgba($success_color);
$advertence: rgba($advertence_color);
$info: rgba($info_color);
$warn: rgba($warn_color);

$stops: 20;
$half_stops: calc($stops / 2);

@function generate-palette($base-color) {
   $color-lighten: calc(100% - color.lightness($base-color));
   $color-darken: color.lightness($base-color);

   $lighten-offset: math.floor(calc($color-lighten / ($half_stops)));
   $darken-offset: math.floor(calc($color-darken / ($half_stops)));

   $contrast-light-text: rgba(black, 0.87);
   $contrast-dark-text: rgba(white, 0.87);

   $palette: (
   );
$contrast_map: (
);

@for $i from 1 through $stops {
   $new-color: nil;
   $contrast: nil;
   $light-ammount: nil;

   @if ($i < $half_stops) {
      $contrast: $contrast-light-text;
      $light-ammount: math.floor(calc(100% - (($i + 1) * $lighten-offset)));
   }

   @else if($i > $half_stops) {
      $contrast: $contrast-dark-text;
      $light-ammount: math.round($color-darken - (($i - $half_stops) * $darken-offset));
   }

   @else {
      $contrast: $contrast-dark-text;
      $light-ammount: $color-darken;
   }

   $index: $i * calc(1000 / $stops);

   $new-color: color.change($base-color, $lightness: $light-ammount);

   $contrast_map: map-merge($contrast_map, ($index: $contrast));
   $palette: map-merge($palette, ($index: $new-color));
}

$palette: map-merge($palette, (contrast: $contrast_map));

@return $palette;
}

$primary-palette: generate-palette($primary);
$secondary-palette: generate-palette($secondary);
$tertiary-palette: generate-palette($tertiary);
$warn-palette: generate-palette($warn);

$my-theme: mat.define-light-theme((color: (basic: mat.define-palette($tertiary-palette, 500),
            primary: mat.define-palette($primary-palette, 500),
            accent: mat.define-palette($secondary-palette, 500),
            warn: mat.define-palette($warn-palette, 500),
         ),
         density: 0,
      ));

@include mat.all-component-themes($my-theme);

//@debug $primary-palette;
:root {
   --main-0: #{map-get($primary-palette, 0)};
   --main-50: #{map-get($primary-palette, 50)};
   --main-100: #{map-get($primary-palette, 100)};
   --main-150: #{map-get($primary-palette, 150)};
   --main-200: #{map-get($primary-palette, 200)};
   --main-250: #{map-get($primary-palette, 250)};
   --main-300: #{map-get($primary-palette, 300)};
   --main-350: #{map-get($primary-palette, 350)};
   --main-400: #{map-get($primary-palette, 400)};
   --main-450: #{map-get($primary-palette, 450)};
   --main-500: #{map-get($primary-palette, 500)};
   --main-550: #{map-get($primary-palette, 550)};
   --main-600: #{map-get($primary-palette, 600)};
   --main-650: #{map-get($primary-palette, 650)};
   --main-700: #{map-get($primary-palette, 700)};
   --main-750: #{map-get($primary-palette, 750)};
   --main-800: #{map-get($primary-palette, 800)};
   --main-850: #{map-get($primary-palette, 850)};
   --main-900: #{map-get($primary-palette, 900)};
   --main-950: #{map-get($primary-palette, 950)};
   --main-1000: #{map-get($primary-palette, 1000)};

   --tertiary-550: #{map-get($tertiary-palette, 600)};
   --tertiary-500: #{map-get($tertiary-palette, 500)};

   --main: var(--main-500);
   --secondary-main: #{map-get($secondary-palette, 500)};
   --text-warning: var(--main-400);
   --border-box: var(--main-600);
   --border-box-light: var(--main-200);
   --background: rgb(var(--primary) / 0.2);
   --background-today: var(--main-600);
   --background-weekend: #00000000;

   --mdc-circular-progress-active-indicator-color: var(--main);
}